#!/usr/bin/env bash
# [{
#   type: front,
#   name: damosFront,
#   container: nginx,
#   rep: http://bitbucket.org/konekon/1705-front-end.git,
#   server: http://konekon.ru/damos/                            #Backand URL
#   host: 1705.konekon.ru,                                      #Virtual host from internet
# }, {
#   type: node,
#   name: damosNode,
#   container: node,                                            #Default: type
#   rep: http://bitbucket.org/konekon/1705-back-end.git,
#   server: http://konekon.ru/,                                 #Server, backend is on
#   host: damos,                                                #Backend will be available on $server:81/$host
#   port: 20000,                                                #Port. It should be autogenerated(cauze doesn't have any meaning. But later)
#   arguments: "DATABASE='mysql://.....'"                       #Arguments to nodeJS on startup: $arguments node --harmony bin/www. Env with mode and host/port is already defined
# }]

#Staff  #{{{
settings="/home/igorjan/settings.json"
if [ ! -f $settings ]; then
    echo '[]' > "$settings"
fi

projects=`jq '.' $settings`

fail () {
    echo "$1"
    exit 1
}

usage () {
   cat $settings
   exit 0
}

toNamedParams () {
    type=$1
    name=$2
    container=$3
    rep=$4
    server=$5
    host=$6
    port=$7
    arguments=$8
    folder=$9
    script=${10}
    branch=${11}
    if [ ! "$container" ]; then container="$type"; fi
}

addProject () {
    toNamedParams "$@"
    projects=`echo $projects | jq ". + [{
    \"type\": \"$type\",
    \"name\": \"$name\",
    \"container\": \"$container\",
    \"rep\": \"$rep\",
    \"server\": \"$server\",
    \"host\": \"$host\",
    \"port\": \"$port\",
    \"arguments\": \"$arguments\",
    \"folder\": \"$folder\",
    \"script\": \"$script\",
    \"branch\": \"$branch\"
}]"`
}

getProjectByName () {
    found=`echo $projects | jq "map(select(.name == \"$1\"))[]"`
    foundName=`echo $found | jq -r '.name'`
    foundType=`echo $found | jq -r '.type'`
    foundContainer=`echo $found | jq -r '.container'`
    foundRep=`echo $found | jq -r '.rep'`
    foundServer=`echo $found | jq -r '.server'`
    foundHost=`echo $found | jq -r '.host'`
    foundPort=`echo $found | jq -r '.port'`
    foundArguments=`echo $found | jq -r '.arguments'`
    foundFolder=`echo $found | jq -r '.folder'`
    foundScript=`echo $found | jq -r '.script'`
    foundBranch=`echo $found | jq -r '.branch'`
    unset found
    if [ "$foundType" != "" ]; then found=true; fi
}

deleteProjectByName () {
    projects=`echo $projects | jq "map(select(.name != \"$1\"))"`
}

checkType () {
    if [ "$1" == "node" ] || [ "$1" == "front" ] || [ "$1" == "tarantool" ] || [ "$1" == "python" ]; then return; fi
    fail "Incorrect type!"
}





#}}}

#Options #{{{
OPTS=`getopt -o ht:n:c:r:s:h:p:a:f:b: -l type:,name:,container:,rep:,repository:,server:,host:,port:,arguments:,folder:,script:,branch:,help -- "$@"`
if [ $? != 0 ]; then exit 1; fi
eval set -- "$OPTS"

#parsing arguments
while true ; do
    case "$1" in
        --help                    ) usage        ;shift;;

        -t | --type               ) type=$2      ;shift 2;;
        -n | --name               ) name=$2      ;shift 2;;
        -c | --container          ) container=$2 ;shift 2;;
        -r | --rep | --repository ) rep=$2       ;shift 2;;
        -s | --server             ) server=$2    ;shift 2;;
        -h | --host               ) host=$2      ;shift 2;;
        -p | --port               ) port=$2      ;shift 2;;
        -a | --arguments          ) arguments=$2 ;shift 2;;
        -f | --folder             ) folder=$2    ;shift 2;;
        -b | --branch             ) branch=$2    ;shift 2;;
        --script                  ) script=$2    ;shift 2;;

        --                        ) shift; break;;
    esac
done #}}}

#Parsing # {{{
if [ "$1" == "create" ]; then # {{{
    if [ ! "$name" ] || [ ! "$type" ] || [ ! "$rep" ]; then fail "Type and name and rep are required!"; fi
    case "$name" in
        *\ *) fail 'Name cannot contain spaces!';;
    esac

    getProjectByName "$name"
    if [ "$found" ]; then fail "Project already exists!"; fi
    checkType $type

    if [ ! "$branch" ]; then branch="master"; fi
    addProject "$type" "$name" "$container" "$rep" "$server" "$host" "$port" "$arguments" "$folder" "$script" "$branch"
    if [ "$type" == "front" ]; then #{{{
        docker exec -ti "$container" bash -c "mkdir -p /home/nesuko && cd /home/nesuko && rm -rf $name && git clone $rep $name && cd $name && git checkout $branch && npm i && bower i -F --allow-root"
        docker exec -ti "$container" bash -c "rm -rf /var/www/$name && mkdir -p /var/www/$name"
        docker exec -ti "$container" bash -c "cd /home/nesuko/$name && SRV=$server npm run $script && cp -r /home/nesuko/$name/$folder /var/www/$name"
        docker exec -ti "$container" bash -c "echo -e \"server {
    listen   80;

    server_name $host;
    root /var/www/$name/$folder;
    index index.html index.htm;

    location / {
        allow all;
        try_files \"'$'\"uri \"'$'\"uri/ /index.html =404;
    }
}\" > /etc/nginx/sites-available/$host"
        docker exec -ti "$container" bash -c "ln -fs /etc/nginx/sites-available/$host /etc/nginx/sites-enabled/$host"
        docker kill -s HUP $container
#}}}
    fi #}}}
# }}}

elif [ "$1" == "pull" ]; then # {{{
    if [ ! "$name" ]; then fail "Name is required!"; fi
    getProjectByName "$name"
    if [ ! "$found" ]; then fail "Project with name '$name' is not found!"; fi

    if [ $foundType == "front" ]; then
	if [ "$branch" ]; then foundBranch="$branch"; fi
	if [ ! "$foundBranch" ]; then foundBranch="master"; fi
        docker exec -ti $foundContainer bash -c "cd /home/nesuko/$foundName && git stash && git checkout $foundBranch && git pull && npm i --all && SRV=$foundServer npm run $foundScript && cp -r /home/nesuko/$foundName/$foundFolder /var/www/$foundName"
    elif [ "$foundType" == "python" ]; then
        cd /home/igorjan/$foundName && git pull && docker exec -ti "$foundContainer" bash -c "pip install -r requirements.txt"
        docker exec -ti "$foundContainer" bash -c "./manage.py migrate"
        docker restart "$foundContainer"
    fi
fi #}}}
# }}}

# echo "$projects"
echo "$projects" > $settings
