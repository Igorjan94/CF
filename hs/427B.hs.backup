import Data.Sequence
getInts s = map read $ words s

solve :: Int -> Int -> sequence -> Int
solve t c xs = get (Data.Sequence.length(Data.Sequence.filter(>t) (Data.Sequence.take c xs))) (Data.Sequence.take c xs) (Data.Sequence.drop c xs) t

f y t = if y > t then 1 else 0

get :: Int -> sequence -> sequence -> Int -> Int
get 0     xs [] t = 1
get count xs [] t = 0
get 0     (x:xs) (y:ys) t = 1 + get (f y t) (xs |> y) ys t
get count (x:xs) (y:ys) t = get (count - f x t + f y t) (xs |> y) ys t

main = do
    s <- getLine
    let [n, t, c] = getInts s
    s <- getLine
    let x = getInts s
        y = solve t c (fromList x)
    print(Data.Sequence.toList y)
